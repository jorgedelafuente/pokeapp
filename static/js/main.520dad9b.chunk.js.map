{"version":3,"sources":["components/Pokecard/Pokecard.tsx","components/Pokedatabase/Pokedatabase.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["capitalizeword","word","charAt","toUpperCase","slice","Pokecard","number","imgSrc","this","props","id","imgSrcB","imgSrchr","className","name","species","exp","height","weight","abilities","map","a","i","key","ability","types","t","type","src","alt","React","Component","Pokedatabase","state","loading","pokemon","JSON","parse","window","localStorage","getItem","handleClick","bind","setState","getPokemon","numberArray","length","PokemonTeamSize","Math","floor","random","indexOf","push","index","axios","get","headers","Accept","res","data","setItem","stringify","console","log","onClick","p","base_experience","defaultProps","PokemonTotalAmount","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.520dad9b.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./Pokecard.scss\";\r\n\r\nconst PokeAPI =\r\n   \"https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/\";\r\nconst PokeAPIhr = \"http://assets.pokemon.com/assets/cms2/img/pokedex/detail/\";\r\nconst PokeAPIB =\r\n   \"https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/back/\";\r\n// const PokeAPIS =\r\n//    \"https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/shiny/\";\r\n// const PokeAPIBS =\r\n//    \"https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/back/shiny/\";\r\n\r\ninterface PokecardProps {\r\n   id: number;\r\n   name: string;\r\n   key: number;\r\n   abilities: Array<any>;\r\n   types: Array<any>;\r\n   exp: number;\r\n   height: number;\r\n   weight: number;\r\n   species: string;\r\n}\r\n\r\nlet convertThreeDigitNumber = (number: number): any => {\r\n   if (number < 100) {\r\n      return `00${number}`.slice(-3);\r\n   } else {\r\n      return number;\r\n   }\r\n};\r\n\r\nlet capitalizeword = (word: string): string => {\r\n   return word.charAt(0).toUpperCase() + word.slice(1);\r\n};\r\n\r\nexport class Pokecard extends React.Component<PokecardProps, {}> {\r\n   render() {\r\n      let imgSrc = `${PokeAPI}${this.props.id}.png`;\r\n      let imgSrcB = `${PokeAPIB}${this.props.id}.png`;\r\n      // let imgSrcBS = `${PokeAPIBS}${this.props.id}.png`;\r\n      // let imgSrcS = `${PokeAPIS}${this.props.id}.png`;\r\n      let imgSrchr = `${PokeAPIhr}${convertThreeDigitNumber(\r\n         this.props.id\r\n      )}.png`;\r\n      return (\r\n         <>\r\n            <div className='card'>\r\n               <h2>{this.props.name}</h2>\r\n               <div>\r\n                  <div>Species: {capitalizeword(this.props.species)}</div>\r\n                  <div>Base EXP: {this.props.exp}</div>\r\n                  <div>Height: {this.props.height}</div>\r\n                  <div>Weight: {this.props.weight}</div>\r\n                  <div>\r\n                     Abilities:{\" \"}\r\n                     {this.props.abilities.map((a, i) => (\r\n                        <span key={i}>{capitalizeword(a.ability.name)} </span>\r\n                     ))}\r\n                  </div>\r\n                  <div>\r\n                     Types:{\" \"}\r\n                     {this.props.types.map((t, i) => (\r\n                        <span key={i}>{capitalizeword(t.type.name)} </span>\r\n                     ))}\r\n                  </div>\r\n                  <div className='PokeImage'>\r\n                     <img src={imgSrchr} alt={this.props.name} />\r\n                     <img src={imgSrc} alt={this.props.name} />\r\n                     <img src={imgSrcB} alt={this.props.name} />\r\n                     {/* <img src={imgSrcBS} alt={this.props.name} />\r\n                     <img src={imgSrcS} alt={this.props.name} /> */}\r\n                  </div>\r\n               </div>\r\n            </div>\r\n         </>\r\n      );\r\n   }\r\n}\r\n","import React from \"react\";\r\nimport axios from \"axios\";\r\nimport { Pokecard } from \"../Pokecard/Pokecard\";\r\n\r\ninterface PokedatabaseProps {\r\n   PokemonTeamSize: number;\r\n   PokemonTotalAmount: number;\r\n}\r\ninterface PokedatabaseState {\r\n   pokemon: Array<any>;\r\n   loading: Boolean;\r\n}\r\n\r\nclass Pokedatabase extends React.Component<\r\n   PokedatabaseProps,\r\n   PokedatabaseState,\r\n   {}\r\n> {\r\n   public static defaultProps = {\r\n      PokemonTeamSize: 5,\r\n      PokemonTotalAmount: 807\r\n   };\r\n   constructor(props: any) {\r\n      super(props);\r\n      this.state = {\r\n         loading: false,\r\n         pokemon: JSON.parse(window.localStorage.getItem(\"pokemon\")!) || []\r\n      };\r\n      this.handleClick = this.handleClick.bind(this);\r\n   }\r\n   //    this.seenJokes = new Set(this.state.jokes.map(j => j.text));\r\n   //    console.log(this.seenJokes);\r\n\r\n   //    componentDidMount() {\r\n   //       console.log(this.state.jokes.length);\r\n   //       if (this.state.jokes.length === 0) {\r\n   //          console.log(\"from api\");\r\n   //          this.getJokes();\r\n   //       } else {\r\n   //          console.log(\"from localstorage\");\r\n   //          //  this.getJokes();\r\n   //       }\r\n   //    }\r\n   handleClick() {\r\n      this.setState({ loading: true }, this.getPokemon);\r\n   }\r\n\r\n   async getPokemon() {\r\n      let numberArray: Array<number> = [];\r\n      while (numberArray.length < this.props.PokemonTeamSize) {\r\n         let number = Math.floor(Math.random() * 807) + 1;\r\n         if (numberArray.indexOf(number) === -1) {\r\n            numberArray.push(number);\r\n         }\r\n      }\r\n      let pokemon = [];\r\n      while (pokemon.length < numberArray.length) {\r\n         let index: number = numberArray[pokemon.length];\r\n         let res = await axios.get(\r\n            \"https://pokeapi.co/api/v2/pokemon/\" + index,\r\n            {\r\n               headers: { Accept: \"application/json\" }\r\n            }\r\n         );\r\n         pokemon.push(res.data);\r\n         this.setState({\r\n            loading: false,\r\n            pokemon: pokemon\r\n         });\r\n         window.localStorage.setItem(\"pokemon\", JSON.stringify(pokemon));\r\n      }\r\n      console.log(pokemon);\r\n   }\r\n   render() {\r\n      if (this.state.loading) {\r\n         return (\r\n            <div className='spinner'>\r\n               <i className='fas fa-8x fa-spinner fa-spin' />\r\n               {/* <i className='fas fa-8x fa-sync fa-spin' /> */}\r\n               <h3>Loading</h3>\r\n            </div>\r\n         );\r\n      } else if (!this.state.loading && this.state.pokemon.length > 1) {\r\n         console.log(this.state.pokemon);\r\n         return (\r\n            <>\r\n               <div>Pokemon Team</div>\r\n               <button onClick={this.handleClick}>Get New Pokemon Team</button>\r\n               {this.state.pokemon.map(p => (\r\n                  <Pokecard\r\n                     key={p.id}\r\n                     id={p.id}\r\n                     name={p.name}\r\n                     exp={p.base_experience}\r\n                     height={p.height}\r\n                     weight={p.weight}\r\n                     abilities={p.abilities}\r\n                     types={p.types}\r\n                     species={p.species.name}\r\n                  />\r\n               ))}\r\n            </>\r\n         );\r\n      } else {\r\n         return (\r\n            <>\r\n               <div>Pokemon Database</div>\r\n               <button onClick={this.handleClick}>Get New Pokemon Team</button>\r\n            </>\r\n         );\r\n      }\r\n   }\r\n}\r\n\r\nexport default Pokedatabase;\r\n","import React from \"react\";\n// import Pokedex from \"./components/Pokedex/Pokedex\";\n// import Jokes from \"./components/dadjokes\";\nimport Pokedatabase from \"./components/Pokedatabase/Pokedatabase\";\n\nimport \"./App.css\";\n\n// interface pokemon {\n//    // id: any;\n//    // key: any;\n//    // name: string;\n//    pokemon: Array<any>;\n// }\n\nconst App: React.FC = () => {\n   return (\n      <div className='App'>\n         {/* <Pokedex /> */}\n         {/* <Jokes /> */}\n         <Pokedatabase />\n      </div>\n   );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}