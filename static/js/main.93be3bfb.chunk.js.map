{"version":3,"sources":["images/PokemonLogo.jpg","images/pokeicon.png","images/poketrainer.jpg","views/Pokedex/Pokecard/Pokecard.tsx","components/PokeLogo/PokeLogo.tsx","components/PokeHeading/PokeHeading.tsx","views/Pokedex/PokeHomeScreen/PokedexHome.tsx","components/Loader/Loader.tsx","views/Pokedex/PokeHomeScreen/PokedexHomeImage.tsx","views/Pokedex/Pokedex.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","capitalizeword","word","charAt","toUpperCase","slice","Pokecard","number","imgSrc","this","props","id","imgSrchr","mt","width","mx","className","p","name","src","sx","height","borderRadius","species","types","map","t","i","key","type","weight","mb","abilities","a","ability","exp","React","Component","PokedexHome","PokeLogo","alt","PokeHeading","text","onClick","Loader","PokeIcon","PokedexHomeImage","PokeTrainerImage","Pokedatabase","state","loading","pokemon","JSON","parse","window","localStorage","getItem","getPokemonTeam","bind","resetPokemonTeam","setState","getPokemon","clear","location","href","numberArray","length","PokemonTeamSize","Math","floor","random","PokemonTotalAmount","indexOf","push","index","axios","get","headers","Accept","res","data","setItem","stringify","base_experience","defaultProps","theme","fontSizes","colors","primary","gray","secondary","buttons","color","bg","border","outline","boxShadow","App","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2GAAAA,EAAOC,QAAU,IAA0B,yC,mBCA3CD,EAAOC,QAAU,IAA0B,sC,mBCA3CD,EAAOC,QAAU,IAA0B,yC,oXC4BvCC,EAAiB,SAACC,GACnB,OAAOA,EAAKC,OAAO,GAAGC,cAAgBF,EAAKG,MAAM,IAGvCC,EAAb,iLAEM,IAdyBC,EAcrBC,EAAM,UA7Bb,6EA6Ba,OAAgBC,KAAKC,MAAMC,GAA3B,QACNC,EAAQ,UA7BA,6DA6BA,QAfaL,EAgBtBE,KAAKC,MAAMC,IAfJ,IACH,YAAKJ,GAASF,OAAO,GAErBE,EAWK,QAGZ,OACG,oCACG,kBAAC,IAAD,CAAMM,GAAI,EAAGC,MAAO,CAAC,IAAK,KAAMC,GAAG,QAChC,yBAAKC,UAAU,iBACZ,kBAAC,IAAD,KACG,kBAAC,IAAD,CAAKC,EAAG,EAAGH,MAAO,MAClB,kBAAC,IAAD,CAAKA,MAAO,IACT,wBAAIE,UAAU,cACVf,EAAeQ,KAAKC,MAAMQ,QAKjC,kBAAC,IAAD,CAAKD,EAAG,EAAGH,MAAO,KACf,kBAAC,IAAD,CACGE,UAAU,YACVG,IAAKX,EACLY,GAAI,CACDN,MAAO,GACPO,OAAQ,GACRC,aAAc,UAK1B,kBAAC,IAAD,KACG,kBAAC,IAAD,CAAKR,MAAO,IAAZ,mBACeb,EAAeQ,KAAKC,MAAMa,UAEzC,kBAAC,IAAD,CAAKT,MAAO,IAAZ,eACW,IACPL,KAAKC,MAAMc,MAAMC,KAAI,SAACC,EAAGC,GAAJ,OACnB,0BAAMC,IAAKD,IACNA,EAAI,KAAO,IAAM1B,EAAeyB,EAAEG,KAAKX,YAKrD,kBAAC,IAAD,KACG,kBAAC,IAAD,CAAKJ,MAAO,IAAZ,kBAA8BL,KAAKC,MAAMW,QACzC,kBAAC,IAAD,CAAKP,MAAO,IAAZ,kBAA8BL,KAAKC,MAAMoB,SAE5C,kBAAC,IAAD,KACG,kBAAC,IAAD,CAAKC,GAAI,EAAGjB,MAAO,GAAnB,oBACgB,IACZL,KAAKC,MAAMsB,UAAUP,KAAI,SAACQ,EAAGN,GAAJ,OACvB,0BAAMC,IAAKD,IACNA,EAAI,KAAO,IAAM1B,EAAegC,EAAEC,QAAQhB,YAKxD,kBAAC,IAAD,KACG,kBAAC,IAAD,CAAKJ,MAAO,GACT,kBAAC,IAAD,CAAOE,UAAU,UAAUG,IAAKP,MAGtC,kBAAC,IAAD,KACG,kBAAC,IAAD,CAAKmB,GAAI,EAAGjB,MAAO,GAAnB,2BACuBL,KAAKC,MAAMyB,aAjEvD,GAA8BC,IAAMC,W,iBCpBrBC,G,MARK,WACjB,OACG,oCACG,yBAAKtB,UAAU,WAAWG,IAAKoB,IAAUC,IAAI,gBCQvCC,G,MARK,SAAC/B,GAClB,OACG,oCACG,wBAAIM,UAAU,eAAeN,EAAMgC,SCW7BJ,G,MAVK,SAAC5B,GAClB,OACG,oCACG,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAagC,KAAMhC,EAAMgC,OACzB,kBAAC,IAAD,CAAQC,QAASjC,EAAMiC,SAAvB,gC,iBCDMC,G,MAXA,WACZ,OACG,oCACG,6BACA,wBAAI5B,UAAU,cAAd,8BACA,6BACA,yBAAKA,UAAU,kBAAkBG,IAAK0B,IAAUL,IAAI,gB,iBCQ9CM,EAdU,WACtB,OACG,oCACG,6BACG,yBACG9B,UAAU,mBACVG,IAAK4B,IACLP,IAAI,8BCQbQ,G,kBASH,WAAYtC,GAAa,IAAD,8BACrB,4CAAMA,KACDuC,MAAQ,CACVC,SAAS,EACTC,QAASC,KAAKC,MAAMC,OAAOC,aAAaC,QAAQ,aAAgB,IAEnE,EAAKC,eAAiB,EAAKA,eAAeC,KAApB,gBACtB,EAAKC,iBAAmB,EAAKA,iBAAiBD,KAAtB,gBAPH,E,8EAUrBjD,KAAKmD,SAAS,CAAEV,SAAS,GAAQzC,KAAKoD,c,yCAItCP,OAAOC,aAAaO,QACpBR,OAAOS,SAASC,KAAO,c,2JAKvB,IADIC,EAA6B,GAC1BA,EAAYC,OAASzD,KAAKC,MAAMyD,iBAChC5D,EACD6D,KAAKC,MAAMD,KAAKE,SAAW7D,KAAKC,MAAM6D,oBAAsB,GAC1B,IAAjCN,EAAYO,QAAQjE,IACrB0D,EAAYQ,KAAKlE,GAGnB4C,EAAU,G,YACPA,EAAQe,OAASD,EAAYC,Q,wBAC7BQ,EAAgBT,EAAYd,EAAQe,Q,SACxBS,IAAMC,IACnB,qCAAuCF,EACvC,CACGG,QAAS,CAAEC,OAAQ,sB,OAHrBC,E,OAMJ5B,EAAQsB,KAAKM,EAAIC,MACjBvE,KAAKmD,SAAS,CACXV,SAAS,EACTC,QAASA,IAEZG,OAAOC,aAAa0B,QAAQ,UAAW7B,KAAK8B,UAAU/B,I,qJAIzD,OAAI1C,KAAKwC,MAAMC,QAET,oCACG,kBAAC,EAAD,CACGR,KAAM,uBACNC,QAASlC,KAAKgD,iBAEjB,kBAAC,EAAD,QAGGhD,KAAKwC,MAAMC,SAAWzC,KAAKwC,MAAME,QAAQe,OAAS,EAGxD,oCACG,kBAAC,EAAD,CACGxB,KAAM,eACNC,QAASlC,KAAKgD,iBAEhBhD,KAAKwC,MAAME,QAAQ1B,KAAI,SAAAR,GAAC,OACtB,kBAAC,EAAD,CACGW,IAAKX,EAAEN,GACPA,GAAIM,EAAEN,GACNO,KAAMD,EAAEC,KACRiB,IAAKlB,EAAEkE,gBACP9D,OAAQJ,EAAEI,OACVS,OAAQb,EAAEa,OACVE,UAAWf,EAAEe,UACbR,MAAOP,EAAEO,MACTD,QAASN,EAAEM,QAAQL,UAGzB,kBAAC,IAAD,CAAQL,GAAI,EAAGkB,GAAI,EAAGY,QAASlC,KAAKkD,kBAApC,uBAOH,oCACG,kBAAC,EAAD,CACGjB,KAAM,uBACNC,QAASlC,KAAKgD,iBAEjB,kBAAC,EAAD,W,GAjGYrB,IAAMC,YAA3BW,EAKWoC,aAAe,CAC1BjB,gBAAiB,EACjBI,mBAAoB,KAiGXvB,Q,gBCrHTqC,EAAQ,CACXC,UAAW,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IACpCC,OAAQ,CACLC,QAAS,MACTC,KAAM,UACNC,UAAW,SAEdC,QAAS,CACNH,QAAS,CACNI,MAAO,QACPC,GAAI,UACJC,OAAQ,mBAEXC,QAAS,CACNH,MAAO,UACPC,GAAI,cACJG,UAAW,qBAeLC,EAVO,WACnB,OACG,kBAAC,IAAD,CAAeZ,MAAOA,GACnB,yBAAKrE,UAAU,OACZ,kBAAC,EAAD,SCnBQkF,QACW,cAA7B5C,OAAOS,SAASoC,UAEe,UAA7B7C,OAAOS,SAASoC,UAEhB7C,OAAOS,SAASoC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDmI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.93be3bfb.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/PokemonLogo.8831bbff.jpg\";","module.exports = __webpack_public_path__ + \"static/media/pokeicon.9264d5ec.png\";","module.exports = __webpack_public_path__ + \"static/media/poketrainer.d3ba7a64.jpg\";","import React from \"react\";\r\nimport \"./Pokecard.scss\";\r\nimport { Card, Image, Flex, Box } from \"rebass\";\r\n\r\nconst PokeAPI =\r\n   \"https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/\";\r\nconst PokeAPIhr = \"http://assets.pokemon.com/assets/cms2/img/pokedex/detail/\";\r\n\r\ninterface PokecardProps {\r\n   id: number;\r\n   name: string;\r\n   key: number;\r\n   abilities: Array<any>;\r\n   types: Array<any>;\r\n   exp: number;\r\n   height: number;\r\n   weight: number;\r\n   species: string;\r\n}\r\n\r\nlet convertThreeDigitNumber = (number: number): any => {\r\n   if (number < 100) {\r\n      return `00${number}`.slice(-3);\r\n   } else {\r\n      return number;\r\n   }\r\n};\r\n\r\nlet capitalizeword = (word: string): string => {\r\n   return word.charAt(0).toUpperCase() + word.slice(1);\r\n};\r\n\r\nexport class Pokecard extends React.Component<PokecardProps, {}> {\r\n   render() {\r\n      let imgSrc = `${PokeAPI}${this.props.id}.png`;\r\n      let imgSrchr = `${PokeAPIhr}${convertThreeDigitNumber(\r\n         this.props.id\r\n      )}.png`;\r\n      return (\r\n         <>\r\n            <Card mt={2} width={[320, 480]} mx='auto'>\r\n               <div className='card cardFont'>\r\n                  <Flex>\r\n                     <Box p={2} width={1 / 4}></Box>\r\n                     <Box width={2 / 4}>\r\n                        <h2 className='cardHeader'>\r\n                           {capitalizeword(this.props.name)}\r\n                        </h2>\r\n                     </Box>\r\n                     {/* </Flex>\r\n                  <Flex> */}\r\n                     <Box p={2} width={1 / 4}>\r\n                        <Image\r\n                           className='imgAvatar'\r\n                           src={imgSrc}\r\n                           sx={{\r\n                              width: 50,\r\n                              height: 50,\r\n                              borderRadius: 9999\r\n                           }}\r\n                        />\r\n                     </Box>\r\n                  </Flex>\r\n                  <Flex>\r\n                     <Box width={1 / 2}>\r\n                        • Species: {capitalizeword(this.props.species)}\r\n                     </Box>\r\n                     <Box width={1 / 2}>\r\n                        • Type:{\" \"}\r\n                        {this.props.types.map((t, i) => (\r\n                           <span key={i}>\r\n                              {(i ? \", \" : \"\") + capitalizeword(t.type.name)}\r\n                           </span>\r\n                        ))}\r\n                     </Box>\r\n                  </Flex>\r\n                  <Flex>\r\n                     <Box width={1 / 2}>• Height: {this.props.height}</Box>\r\n                     <Box width={1 / 2}>• Weight: {this.props.weight}</Box>\r\n                  </Flex>\r\n                  <Flex>\r\n                     <Box mb={2} width={1}>\r\n                        • Abilities:{\" \"}\r\n                        {this.props.abilities.map((a, i) => (\r\n                           <span key={i}>\r\n                              {(i ? \", \" : \"\") + capitalizeword(a.ability.name)}\r\n                           </span>\r\n                        ))}\r\n                     </Box>\r\n                  </Flex>\r\n                  <Flex>\r\n                     <Box width={1}>\r\n                        <Image className='imgMain' src={imgSrchr} />\r\n                     </Box>\r\n                  </Flex>\r\n                  <Flex>\r\n                     <Box mb={2} width={1}>\r\n                        • Base Experience: {this.props.exp}\r\n                     </Box>\r\n                  </Flex>\r\n               </div>\r\n            </Card>\r\n         </>\r\n      );\r\n   }\r\n}\r\n","import React from \"react\";\r\nimport PokeLogo from \"../../images/PokemonLogo.jpg\";\r\nimport \"./PokeLogo.scss\";\r\n\r\nconst PokedexHome = () => {\r\n   return (\r\n      <>\r\n         <img className='PokeLogo' src={PokeLogo} alt='PokeLogo' />\r\n      </>\r\n   );\r\n};\r\n\r\nexport default PokedexHome;\r\n","import React from \"react\";\r\nimport \"./PokeHeading.scss\";\r\n\r\ninterface props {\r\n   text: string;\r\n}\r\n\r\nconst PokeHeading = (props: props) => {\r\n   return (\r\n      <>\r\n         <h1 className='PokeHeading'>{props.text}</h1>\r\n      </>\r\n   );\r\n};\r\n\r\nexport default PokeHeading;\r\n","import React from \"react\";\r\nimport PokeLogo from \"../../../components/PokeLogo/PokeLogo\";\r\nimport PokeHeading from \"../../../components/PokeHeading/PokeHeading\";\r\nimport \"./PokedexHome.scss\";\r\nimport { Button } from \"rebass\";\r\n\r\ninterface props {\r\n   onClick: (event: React.MouseEvent<HTMLButtonElement>) => void;\r\n   text: string;\r\n}\r\n\r\nconst PokedexHome = (props: props) => {\r\n   return (\r\n      <>\r\n         <PokeLogo />\r\n         <PokeHeading text={props.text} />\r\n         <Button onClick={props.onClick}>Generate New Pokemon Team</Button>\r\n      </>\r\n   );\r\n};\r\n\r\nexport default PokedexHome;\r\n","import React from \"react\";\r\nimport PokeIcon from \"../../images/pokeicon.png\";\r\nimport \"./Loader.scss\";\r\n\r\nconst Loader = () => {\r\n   return (\r\n      <>\r\n         <br />\r\n         <h3 className='loaderText'>Generating Pokemon Team...</h3>\r\n         <br />\r\n         <img className='PokeIcon rotate' src={PokeIcon} alt='PokeLogo' />\r\n      </>\r\n   );\r\n};\r\n\r\nexport default Loader;\r\n","import React from \"react\";\r\nimport \"./PokedexHome.scss\";\r\nimport PokeTrainerImage from \"../../../images/poketrainer.jpg\";\r\n\r\nconst PokedexHomeImage = () => {\r\n   return (\r\n      <>\r\n         <div>\r\n            <img\r\n               className='pokeTrainerImage'\r\n               src={PokeTrainerImage}\r\n               alt='pokemon_trainer_amiibo'\r\n            />\r\n         </div>\r\n      </>\r\n   );\r\n};\r\n\r\nexport default PokedexHomeImage;\r\n","import React from \"react\";\r\nimport axios from \"axios\";\r\nimport { Pokecard } from \"./Pokecard/Pokecard\";\r\nimport PokedexHome from \"./PokeHomeScreen/PokedexHome\";\r\nimport Loader from \"../../../src/components/Loader/Loader\";\r\nimport { Button } from \"rebass\";\r\nimport PokeTrainerImage from \"./PokeHomeScreen/PokedexHomeImage\";\r\n\r\nimport \"./Pokedex.scss\";\r\n\r\ninterface PokedatabaseProps {\r\n   PokemonTeamSize: number;\r\n   PokemonTotalAmount: number;\r\n}\r\ninterface PokedatabaseState {\r\n   pokemon: Array<any>;\r\n   loading: Boolean;\r\n}\r\n\r\nclass Pokedatabase extends React.Component<\r\n   PokedatabaseProps,\r\n   PokedatabaseState,\r\n   {}\r\n> {\r\n   public static defaultProps = {\r\n      PokemonTeamSize: 5,\r\n      PokemonTotalAmount: 807\r\n   };\r\n   constructor(props: any) {\r\n      super(props);\r\n      this.state = {\r\n         loading: false,\r\n         pokemon: JSON.parse(window.localStorage.getItem(\"pokemon\")!) || []\r\n      };\r\n      this.getPokemonTeam = this.getPokemonTeam.bind(this);\r\n      this.resetPokemonTeam = this.resetPokemonTeam.bind(this);\r\n   }\r\n   getPokemonTeam() {\r\n      this.setState({ loading: true }, this.getPokemon);\r\n   }\r\n\r\n   resetPokemonTeam() {\r\n      window.localStorage.clear();\r\n      window.location.href = \"/pokeapp/\";\r\n   }\r\n\r\n   async getPokemon() {\r\n      let numberArray: Array<number> = [];\r\n      while (numberArray.length < this.props.PokemonTeamSize) {\r\n         let number =\r\n            Math.floor(Math.random() * this.props.PokemonTotalAmount) + 1;\r\n         if (numberArray.indexOf(number) === -1) {\r\n            numberArray.push(number);\r\n         }\r\n      }\r\n      let pokemon = [];\r\n      while (pokemon.length < numberArray.length) {\r\n         let index: number = numberArray[pokemon.length];\r\n         let res = await axios.get(\r\n            \"https://pokeapi.co/api/v2/pokemon/\" + index,\r\n            {\r\n               headers: { Accept: \"application/json\" }\r\n            }\r\n         );\r\n         pokemon.push(res.data);\r\n         this.setState({\r\n            loading: false,\r\n            pokemon: pokemon\r\n         });\r\n         window.localStorage.setItem(\"pokemon\", JSON.stringify(pokemon));\r\n      }\r\n   }\r\n   render() {\r\n      if (this.state.loading) {\r\n         return (\r\n            <>\r\n               <PokedexHome\r\n                  text={\"Pokemon Team Builder\"}\r\n                  onClick={this.getPokemonTeam}\r\n               />\r\n               <Loader />\r\n            </>\r\n         );\r\n      } else if (!this.state.loading && this.state.pokemon.length > 1) {\r\n         // console.log(this.state.pokemon);\r\n         return (\r\n            <>\r\n               <PokedexHome\r\n                  text={\"Pokemon Team\"}\r\n                  onClick={this.getPokemonTeam}\r\n               />\r\n               {this.state.pokemon.map(p => (\r\n                  <Pokecard\r\n                     key={p.id}\r\n                     id={p.id}\r\n                     name={p.name}\r\n                     exp={p.base_experience}\r\n                     height={p.height}\r\n                     weight={p.weight}\r\n                     abilities={p.abilities}\r\n                     types={p.types}\r\n                     species={p.species.name}\r\n                  />\r\n               ))}\r\n               <Button mt={3} mb={3} onClick={this.resetPokemonTeam}>\r\n                  Reset Pokemon Team\r\n               </Button>\r\n            </>\r\n         );\r\n      } else {\r\n         return (\r\n            <>\r\n               <PokedexHome\r\n                  text={\"Pokemon Team Builder\"}\r\n                  onClick={this.getPokemonTeam}\r\n               />\r\n               <PokeTrainerImage />\r\n            </>\r\n         );\r\n      }\r\n   }\r\n}\r\n\r\nexport default Pokedatabase;\r\n","import React from \"react\";\nimport Pokedex from \"./views/Pokedex/Pokedex\";\nimport \"./GlobalStyles.scss\";\nimport { ThemeProvider } from \"emotion-theming\";\n// import theme from \"@rebass/preset\";\n\nconst theme = {\n   fontSizes: [12, 14, 16, 24, 32, 48, 64],\n   colors: {\n      primary: \"red\",\n      gray: \"#f6f6ff\",\n      secondary: \"black\"\n   },\n   buttons: {\n      primary: {\n         color: \"white\",\n         bg: \"primary\",\n         border: \"1px solid black\"\n      },\n      outline: {\n         color: \"primary\",\n         bg: \"transparent\",\n         boxShadow: \"inset 0 0 0 2px\"\n      }\n   }\n};\n\nconst App: React.FC = () => {\n   return (\n      <ThemeProvider theme={theme}>\n         <div className='App'>\n            <Pokedex />\n         </div>\n      </ThemeProvider>\n   );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}